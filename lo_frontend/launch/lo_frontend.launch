<launch>
 
    <arg name="robot_namespace" default="robot"/>

    <!--TODO: Parse from yaml -->
    <arg name="number_of_velodynes" default="3" />
    <arg name="b_use_multiple_pc" value="$(eval arg('number_of_velodynes') > 1)"/>

    <arg if="$(arg b_use_multiple_pc)" name="pc_input" value="combined_point_cloud_filtered"/>
    <arg unless="$(arg b_use_multiple_pc)" name="pc_input" value="velodyne_points/transformed"/>

    <arg name="vlp_throttle_freq" default="10.0"/>
    <arg name="pc_trans_in_1" default="velodyne_points/transformed"/>
    <arg name="pc_trans_in_2" default="velodyne_front/velodyne_points/transformed"/>
    <arg name="pc_trans_in_3" default="velodyne_rear/velodyne_points/transformed"/>

    <group ns="$(arg robot_namespace)">
   
        <node launch-prefix="gdb -ex 'set print thread-events off' -ex run --args"
            pkg="lo_frontend"
            name="lo_frontend"
            type="lo_frontend_node"
            output="screen">
           
            <remap from="~LIDAR_TOPIC" to="$(arg pc_input)"/>
            <remap from="~IMU_TOPIC" to="vn100/imu_wori_wcov"/>
            <remap from="~ODOM_TOPIC" to="hero/wio_ekf/odom"/>
            <remap from="~POSE_TOPIC" to="not_currently_used"/>

            <param name="b_publish_tfs" value="false"/>
            <param name="robot_name" value="$(arg robot_namespace)"/>
            <param name="tf_prefix" value="$(arg robot_namespace)"/>

            <rosparam file="$(find lo_frontend)/config/lo_settings.yaml"/>
            <rosparam file="$(find lo_frontend)/config/lo_frames.yaml" subst_value="true"/>
            <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>
            <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>
            <rosparam file="$(find point_cloud_localization)/config/parameters.yaml"/>
            <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>

            <param name="localization/num_threads" value="4" if="$(eval robot_namespace == 'husky1')" />
            <param name="icp/num_threads"          value="4" if="$(eval robot_namespace == 'husky1')" />
            <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'husky2')" />
            <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'husky2')" />
            <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'husky3')" />
            <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'husky3')" />
            <param name="localization/num_threads" value="4" if="$(eval robot_namespace == 'husky4')" />
            <param name="icp/num_threads"          value="4" if="$(eval robot_namespace == 'husky4')" />
            <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'telemax1')" />
            <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'telemax1')" />
            <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'spot1')" />
            <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'spot1')" />
            <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'spot2')" />
            <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'spot2')" />

        </node>


        <node pkg="lo_frontend" name="sensors_health_monitor" type="sensors_health_monitor.py" output="screen">
            <remap from="failure_detection" to="point_cloud_merger_lo/failure_detection"/>
        </node>

        <node pkg="topic_tools" type="transform" name="pose_to_odom" respawn="true" output="screen"
            args="/$(arg robot_namespace)/lo_frontend/localization_integrated_estimate
                    /$(arg robot_namespace)/lo_frontend/odometry nav_msgs/Odometry
                    'nav_msgs.msg.Odometry(header=m.header, pose=m.pose)' --import nav_msgs geometry_msgs">
        </node>
   
        <node pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="velodyne_points"/>
            <remap from="~output" to="$(arg pc_trans_in_1)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -100
                filter_limit_max: 100
                output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node if="$(eval arg('number_of_velodynes') > 1)"
            pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link_front"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="velodyne_front/velodyne_points"/>
            <remap from="~output" to="$(arg pc_trans_in_2)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -100
                filter_limit_max: 100
                output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node if="$(eval arg('number_of_velodynes') > 2)"
            pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link_rear"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="velodyne_rear/velodyne_points"/>
            <remap from="~output" to="$(arg pc_trans_in_3)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -100
                filter_limit_max: 100
                output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node if="$(arg b_use_multiple_pc)" pkg="point_cloud_merger" type="point_cloud_merger_node" name="point_cloud_merger_lo" output="screen">
            <rosparam file="$(find point_cloud_merger)/config/parameters.yaml"/>
            <remap from="~pcld" to="$(arg pc_trans_in_1)"/>
            <remap from="~pcld2" to="$(arg pc_trans_in_2)"/>
            <remap from="~pcld3" to="$(arg pc_trans_in_3)"/>
            <remap from="~combined_point_cloud" to="combined_point_cloud"/>
        </node>

        <node if="$(arg b_use_multiple_pc)" pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" respawn="true"/>
        <node if="$(arg b_use_multiple_pc)" pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen" respawn="true">
            <remap from="~input" to="combined_point_cloud" />
            <remap from="~output" to="combined_point_cloud_filtered" />
            <rosparam subst_value="true">
            filter_field_name: z
            filter_limit_min: -100
            filter_limit_max: 100
            filter_limit_negative: False
            leaf_size: 0.1
            output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>
       
    </group>

    <include file="$(find lidar_slip_detection)/launch/lidar_slip_detection.launch">
        <arg name="robot_namespace" value="$(arg robot_namespace)"/>
    </include>
 
</launch>