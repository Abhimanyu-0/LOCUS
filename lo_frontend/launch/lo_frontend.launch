<launch>
  <arg name="robot_namespace" default="robot"/>

  <arg name="b_use_two_pc" default="true"/>

  <arg if="$(arg b_use_two_pc)" name="pc_input" value="combined_point_cloud_filtered"/>
  <arg unless="$(arg b_use_two_pc)" name="pc_input" value="velodyne_points/transformed"/>

  <!-- Velodyne topic throttle params -->
  <arg name="vlp_throttle_freq" default="10.0"/><!-- Hz -->
  <arg name="pc_trans_in_1" default="velodyne_points/transformed"/>
  <arg name="pc_trans_in_2" default="velodyne_front/velodyne_points/transformed"/>

  <group ns="$(arg robot_namespace)">
  
    <!-- Laser-Odometry -->
    <node launch-prefix="gdb -ex 'set print thread-events off' -ex run --args"
          pkg="lo_frontend"
          name="lo_frontend"
          type="lo_frontend_node"
          output="screen">

      <!-- tf pub -->
      <param name="b_publish_tfs" value="false"/>

      <!-- Topics -->
      <remap from="~LIDAR_TOPIC" to="$(arg pc_input)"/>
      <remap from="~IMU_TOPIC" to="vn100/imu_wori_wcov"/>
      <remap from="~ODOM_TOPIC" to="hero/wio_ekf/odom_integrated"/>
      <remap from="~POSE_TOPIC" to="not_currently_used"/>

      <param name="robot_name" value="$(arg robot_namespace)"/>
      <param name="tf_prefix" value="$(arg robot_namespace)"/>

      <!-- Settings -->
      <rosparam file="$(find lo_frontend)/config/lo_settings.yaml"/>

      <!-- Frames -->
      <rosparam file="$(find lo_frontend)/config/lo_frames.yaml" subst_value="true"/>

      <!-- Point cloud filter -->
      <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>

      <!-- Point cloud odometry -->
      <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>

      <!-- Point cloud localization -->
      <rosparam file="$(find point_cloud_localization)/config/parameters.yaml"/>

      <!-- Point cloud mapper -->
      <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>

      <!-- Threads selection (changes for computational capacity) -->
      <param name="localization/num_threads" value="4" if="$(eval robot_namespace == 'husky1')" />
      <param name="icp/num_threads"          value="4" if="$(eval robot_namespace == 'husky1')" />
      <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'husky2')" />
      <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'husky2')" />
      <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'husky3')" />
      <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'husky3')" />
      <param name="localization/num_threads" value="4" if="$(eval robot_namespace == 'husky4')" />
      <param name="icp/num_threads"          value="4" if="$(eval robot_namespace == 'husky4')" />
      <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'telemax1')" />
      <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'telemax1')" />
      <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'spot1')" />
      <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'spot1')" />
      <param name="localization/num_threads" value="1" if="$(eval robot_namespace == 'spot2')" />
      <param name="icp/num_threads"          value="1" if="$(eval robot_namespace == 'spot2')" />



    </node>

    <!-- Trotthling input cloud -->
    <!--node name="point_cloud_throttler" type="throttle" pkg="topic_tools" args="messages velodyne_points $(arg vlp_throttle_freq)">
    </node-->
 
    <!-- Convert output PoseStamped message to Odometry -->
    <node pkg="topic_tools" type="transform" name="pose_to_odom"
          respawn="true" output="screen"
          args="/$(arg robot_namespace)/lo_frontend/localization_integrated_estimate
                /$(arg robot_namespace)/lo_frontend/odometry
                nav_msgs/Odometry
                'nav_msgs.msg.Odometry(header=m.header, pose=m.pose)' --import nav_msgs geometry_msgs">
    </node>
 
    <!-- Republish node with different frame_id -->
    <node pkg="nodelet" type="nodelet" name="transform_points_base_link"
          args="standalone pcl/PassThrough">
      <remap from="~input" to="velodyne_points"/>
      <!-- <remap from="~input" to="velodyne_points_throttle"/> -->
      <remap from="~output" to="$(arg pc_trans_in_1)"/>
      <rosparam subst_value="true">
        filter_field_name: z
        filter_limit_min: -100
        filter_limit_max: 100
        output_frame: $(arg robot_namespace)/base_link
      </rosparam>
    </node>

    <!-- Republish node with different frame_id -->
    <node if="$(arg b_use_two_pc)" pkg="nodelet" type="nodelet" name="transform_points_base_link_front"
          args="standalone pcl/PassThrough">
      <remap from="~input" to="velodyne_front/velodyne_points"/>
      <!-- <remap from="~input" to="velodyne_front/velodyne_points_throttle"/> -->
      <remap from="~output" to="$(arg pc_trans_in_2)"/>
      <rosparam subst_value="true">
        filter_field_name: z
        filter_limit_min: -100
        filter_limit_max: 100
        output_frame: $(arg robot_namespace)/base_link
      </rosparam>
    </node>

    <!-- Combining the two point clouds -->
    <node if="$(arg b_use_two_pc)" pkg="point_cloud_merger" type="point_cloud_merger_node" name="point_cloud_merger_lo">
      <rosparam file="$(find point_cloud_merger)/config/parameters.yaml"/>
      <remap from="~pcld" to="$(arg pc_trans_in_1)"/>
      <remap from="~pcld2" to="$(arg pc_trans_in_2)"/>
      <remap from="~combined_point_cloud" to="combined_point_cloud"/>
    </node>

    <!-- Run a VoxelGrid filter to clean NaNs, downsample the data, and transform poincloud before publication-->
    <node if="$(arg b_use_two_pc)" pkg="nodelet" type="nodelet" name="pcl_manager_lo" args="manager" output="screen" respawn="true"/>
    <node if="$(arg b_use_two_pc)" pkg="nodelet" type="nodelet" name="voxel_grid_lo" args="load pcl/VoxelGrid pcl_manager" output="screen" respawn="true">
    <remap from="~input" to="combined_point_cloud" /><!--ADD BACK _throttle-->
    <remap from="~output" to="combined_point_cloud_filtered" />
    <rosparam subst_value="true">
      filter_field_name: z
      filter_limit_min: -100
      filter_limit_max: 100
      filter_limit_negative: False
      leaf_size: 0.1
      output_frame: $(arg robot_namespace)/base_link
      </rosparam>
    </node>
  </group>

  <!-- Slip detector -->
  <include file="$(find lidar_slip_detection)/launch/lidar_slip_detection.launch">
    <arg name="robot_namespace" value="$(arg robot_namespace)"/>
  </include>
  
</launch>
