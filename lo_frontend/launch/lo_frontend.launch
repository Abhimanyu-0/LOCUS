<launch>
  <arg name="robot_namespace" default="robot"/>

  <!-- Velodyne topic throttle params -->
  <arg name="vlp_throttle_freq" default="10.0"/><!-- Hz -->

  <group ns="$(arg robot_namespace)">
  
    <!-- Laser-Odometry -->
    <node pkg="lo_frontend"
          name="lo_frontend"
          type="lo_frontend_node"
          output="screen">

      <!-- tf pub -->
      <param name="b_publish_tfs" value="false"/>

      <!-- Topics -->
      <remap from="~pcld" to="velodyne_points/transformed"/>
      <!-- <remap from="~ODOM_TOPIC/husky/lion/odom" to="hero/lion/odom"/> -->
      <remap from="~IMU_TOPIC" to="vn100/imu"/>

      <param name="robot_name" value="$(arg robot_namespace)"/>
      <param name="tf_prefix" value="$(arg robot_namespace)"/>

      <!-- Settings -->
      <rosparam file="$(find lo_frontend)/config/lo_settings.yaml"/>

      <!-- Rates -->
      <rosparam file="$(find lo_frontend)/config/lo_rates.yaml"/>

      <!-- Frames -->
      <rosparam file="$(find lo_frontend)/config/lo_frames.yaml" subst_value="true"/>

      <!-- Point cloud filter -->
      <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>

      <!-- Point cloud odometry -->
      <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>

      <!-- Point cloud localization -->
      <rosparam file="$(find point_cloud_localization)/config/parameters.yaml"/>

      <!-- Point cloud mapper -->
      <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>
    </node>

    <!-- Trotthling input cloud -->
    <!--node name="point_cloud_throttler" type="throttle" pkg="topic_tools" args="messages velodyne_points $(arg vlp_throttle_freq)">
    </node-->
 
    <!-- Convert output PoseStamped message to Odometry -->
    <node pkg="topic_tools" type="transform" name="pose_to_odom"
          respawn="true" output="screen"
          args="/$(arg robot_namespace)/lo_frontend/localization_integrated_estimate
                /$(arg robot_namespace)/lo_frontend/odometry
                nav_msgs/Odometry
                'nav_msgs.msg.Odometry(header=m.header, pose=m.pose)' --import nav_msgs geometry_msgs">
    </node>
 
    <!-- Republish node with different frame_id -->
    <node pkg="nodelet" type="nodelet" name="transform_points_base_link"
          args="standalone pcl/PassThrough">
      <remap from="~input" to="velodyne_points"/>
      <!-- <remap from="~input" to="velodyne_points_throttle"/> -->
      <remap from="~output" to="velodyne_points/transformed"/>
      <rosparam subst_value="true">
        filter_field_name: z
        filter_limit_min: -100
        filter_limit_max: 100
        output_frame: $(arg robot_namespace)/base_link
      </rosparam>
    </node>

    <!-- Republish node with different frame_id -->
    <!--
    <node pkg="nodelet" type="nodelet" name="transform_points_base_link_front"
          args="standalone pcl/PassThrough">
      <remap from="~input" to="velodyne_front/velodyne_points"/>
      <!- - <remap from="~input" to="velodyne_front/velodyne_points_throttle"/> - ->
      <remap from="~output" to="velodyne_front/velodyne_points/transformed"/>
      <rosparam subst_value="true">
        filter_field_name: z
        filter_limit_min: -100
        filter_limit_max: 100
        output_frame: $(arg robot_namespace)/base_link
      </rosparam>
    </node>
    -->
  </group>

  
</launch>
