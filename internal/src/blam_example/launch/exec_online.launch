<launch>
  <arg name="robot_namespace" default="robot"/>

  <group ns="$(arg robot_namespace)">
    <!-- SLAM -->
    <node pkg="blam_slam"
          name="blam_slam"
          type="blam_slam_node"
          output="screen">

      <!-- Topics -->
      <remap from="~pcld" to="velodyne_points/transformed"/>
      <remap from="~artifact" to="artifact_global" />
      <remap from="~artifact_relative" to="artifact_relative" />      

      <!-- Initial pose -->
      <rosparam param="init">
        position: {x: 0.0, y: 0.0, z: 0.0}
        orientation: {roll: 0.0, pitch: 0.0, yaw: 0.0}
        position_sigma: {x: 0.1, y: 0.1, z: 0.1}
        orientation_sigma: {roll: 0.02, pitch: 0.02, yaw: 0.02}
      </rosparam>

      <!-- Noise parameters -->
      <rosparam param="noise">
        odom_position_sigma: 0.9 <!-- 0.4 -->
        odom_attitude_sigma: 0.6 <!-- 0.1 -->
      </rosparam>      

      <!-- Rates -->
      <rosparam file="$(find blam_example)/config/blam_rates.yaml"/>

      <!-- Frames -->
      <rosparam file="$(find blam_example)/config/blam_frames.yaml" subst_value="true"/>

      <!-- Point cloud filter -->
      <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>

      <!-- Point cloud odometry -->
      <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>

      <!-- Point cloud localization -->
      <rosparam file="$(find point_cloud_localization)/config/parameters.yaml"/>

      <!-- Point cloud mapper -->
      <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>

      <!-- Point cloud visualization -->
      <rosparam file="$(find point_cloud_visualizer)/config/parameters.yaml"/>

      <!-- Loop closure -->
      <rosparam file="$(find laser_loop_closure)/config/parameters.yaml"/>


    </node>

    <!-- Republish node with different frame_id -->
    <node pkg="nodelet" type="nodelet" name="transform_points_base_link"
          args="standalone pcl/PassThrough">
      <remap from="~input" to="velodyne_points"/>
      <remap from="~output" to="velodyne_points/transformed"/>
      <rosparam subst_value="true">
        filter_field_name: z
        filter_limit_min: -100
        filter_limit_max: 100
        output_frame: $(arg robot_namespace)/base_link
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="transform_points_world"
          args="standalone pcl/VoxelGrid">
      <remap from="~input" to="blam_slam/octree_map"/>
      <remap from="~output" to="blam_slam/octree_map_downsampled"/>
      <rosparam subst_value="true">
        filter_field_name: z
        filter_limit_min: -100
        filter_limit_max: 100
        output_frame: world
        leaf_size: 0.1
      </rosparam>
    </node>

    <!-- Convert output PoseStamped message to Odometry -->
    <node pkg="topic_tools" type="transform" name="pose_to_odom"
          respawn="true"
          args="/$(arg robot_namespace)/blam_slam/localization_integrated_estimate
                /$(arg robot_namespace)/odometry
                nav_msgs/Odometry
                'nav_msgs.msg.Odometry(header=m.header, pose=geometry_msgs.msg.PoseWithCovariance(pose=m.pose))' --import nav_msgs geometry_msgs">
    </node>

    <!-- BLAM frame/process manager -->
    <node pkg="blam_slam"
          name="blam_manager"
          type="reinit_blam.py">
      <param name="map_frame" value="$(arg robot_namespace)/map"/>
      <param name="blam_frame" value="$(arg robot_namespace)/blam"/>
    </node>

  </group>

</launch>
